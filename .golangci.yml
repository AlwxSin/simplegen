# This file contains all available configuration options
# with their default values.

# options for analysis running
run:
  # which dirs to skip: issues from them won't be reported;
  # can use regexp here: generated.*, regexp is applied on full path;
  # default value is empty list, but default dirs are skipped independently
  # from this option's value (see skip-dirs-use-default).
  # skip-dirs:
  #   -


  # which files to skip: they will be analyzed, but issues from them
  # won't be reported. Default value is empty list, but there is
  # no need to include all autogenerated files, we confidently recognize
  # autogenerated files. If it's not please let us know.
#  skip-files:
#    - common.resolvers.go

  tests: true


# all available settings of specific linters
linters-settings:
  errcheck:
    # report about not checking of errors in type assetions: `a := b.(MyStruct)`;
    # default is false: such cases aren't reported by default.
    check-type-assertions: false

    # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`;
    # default is false: such cases aren't reported by default.
    check-blank: true

    # [deprecated] comma-separated list of pairs of the form pkg:regex
    # the regex is used to ignore names within pkg. (default "fmt:.*").
    # see https://github.com/kisielk/errcheck#the-deprecated-method for details
    ignore: fmt:.*,io/ioutil:^Read.*

  gofumpt:
    module-path: hrm

  govet:
    # report about shadowed variables
    check-shadowing: true

    # settings per analyzer
    settings:
      printf: # analyzer name, run `go tool vet help` to see all analyzers
        funcs: # run `go tool vet help printf` to see available settings for `printf` analyzer
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Infof
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf

    # enable or disable analyzers by name
    enable:
      - atomicalign
    #      - fieldalignment
    enable-all: false
    disable:
      - shadow
    disable-all: false
  golint:
    # minimal confidence for issues, default is 0.8
    min-confidence: 0.8
  gofmt:
    # simplify code: gofmt with `-s` option, true by default
    simplify: true
  gocyclo:
    # minimal code complexity to report, 30 by default (but we recommend 10-20)
    min-complexity: 15
  gocognit:
    # minimal code complexity to report, 30 by default (but we recommend 10-20)
    min-complexity: 30
  dupl:
    # tokens count to trigger issue, 150 by default
    threshold: 100
  goconst:
    # minimal length of string constant, 3 by default
    min-len: 3
    # minimal occurrences count to trigger, 3 by default
    min-occurrences: 3
  misspell:
    # Correct spellings using locale preferences for US or UK.
    # Default is to use a neutral variety of English.
    # Setting locale to US will correct the British spelling of 'colour' to 'color'.
    locale: US
    ignore-words:
      - someword
  lll:
    # max line length, lines longer will be reported. Default is 120.
    # '\t' is counted as 1 character by default, and can be changed with the tab-width option
    line-length: 160
    # tab width in spaces. Default to 1.
    tab-width: 1
  unused:
    # treat code as a program (not a library) and report unused exported identifiers; default is false.
    # XXX: if you enable this setting, unused will report a lot of false-positives in text editors:
    # if it's called for subdir of a project it can't find funcs usages. All text editor integrations
    # with golangci-lint call it on a directory with the changed file.
    check-exported: false
  unparam:
    # Inspect exported functions, default is false. Set to true if no external program/library imports your code.
    # XXX: if you enable this setting, unparam will report a lot of false-positives in text editors:
    # if it's called for subdir of a project it can't find external interfaces. All text editor integrations
    # with golangci-lint call it on a directory with the changed file.
    check-exported: false
  nakedret:
    # make an issue if func has more lines of code than this setting and it has naked returns; default is 30
    max-func-lines: 30
  prealloc:
    # XXX: we don't recommend using this linter before doing performance profiling.
    # For most programs usage of prealloc will be a premature optimization.

    # Report preallocation suggestions only on simple loops that have no returns/breaks/continues/gotos in them.
    # True by default.
    simple: true
    range-loops: true # Report preallocation suggestions on range loops, true by default
    for-loops: false # Report preallocation suggestions on for loops, false by default
  gocritic:
    # Which checks should be disabled; can't be combined with 'enabled-checks'; default is empty
    disabled-checks:
      - regexpMust
      - rangeValCopy
      - importShadow
      - docStub

    # Enable multiple checks by tags, run `GL_DEBUG=gocritic golangci-lint run` to see all tags and checks.
    # Empty list by default. See https://github.com/go-critic/go-critic#usage -> section "Tags".
    enabled-tags:
      - performance
      - style
      - diagnostic
      - experimental
      - opinionated
    settings: # settings passed to gocritic
      captLocal: # must be valid enabled check name
        paramsOnly: true
      hugeParam:
        sizeThreshold: 1024

  godox:
    # report any comments starting with keywords, this is useful for TODO or FIXME comments that
    # might be left in the code accidentally and should be resolved before merging
    keywords: # default keywords are TODO, BUG, and FIXME, these can be overwritten by this setting
      - NOTE
      - OPTIMIZE # marks code that should be optimized before merging
      - HACK # marks hack-arounds that should be removed before merging
  dogsled:
    # checks assignments with too many blank identifiers; default is 2
    max-blank-identifiers: 2

  whitespace:
    multi-if: false   # Enforces newlines (or comments) after every multi-line if statement
    multi-func: false # Enforces newlines (or comments) after every multi-line function signature

issues:
  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    # Exclude some linters from running on tests files.
#    - path: resolvers\.go
#      text: "typeDefFirst:"
#      linters:
#        - gocritic
#    - path: resolvers\.go
#      text: "paramTypeCombine:"
#      linters:
#        - gocritic
#    - path: resolvers\.go
#      linters:
#        - gofumpt
    - path: _test\.go
      linters:
        - bodyclose
        - errcheck
        - forcetypeassert
        - dogsled
        - contextcheck
        - containedctx
        - errorlint
        - gomnd

linters:
  enable-all: true
  disable:
    - cyclop #: checks function and package cyclomatic complexity [fast: false, auto-fix: false]
    - gocyclo # checks function and package cyclomatic complexity
    - gocognit # checks function and package cyclomatic complexity
    - funlen # checks length of functions
    - deadcode # [deprecated]: Finds unused code [fast: false, auto-fix: false]
    - decorder #: check declaration order and count of types, constants, variables and functions [fast: true, auto-fix: false]
    - depguard #: Go linter that checks if package imports are in a list of acceptable packages.
    - exhaustivestruct # [deprecated]: Checks if all struct's fields are initialized [fast: false, auto-fix: false]
    - exhaustruct # Checks if all struct's fields are initialized
    - gochecknoglobals #: check that no global variables exist [fast: false, auto-fix: false]
    - gochecknoinits #: Checks that no init functions are present in Go code [fast: true, auto-fix: false]
    - godox #: Tool for detection of FIXME, TODO and other comment keywords [fast: true, auto-fix: false]
    - goerr113 # Forces to use package errors instead of in-place errors
    - gomnd # magic numbers
    - golint # [deprecated]: Golint differs from gofmt. Gofmt reformats Go source code, whereas golint prints out style mistakes [fast: false, auto-fix: false]
    - interfacer # [deprecated]: Linter that suggests narrower interface types [fast: false, auto-fix: false]
    - ifshort # [deprecated]:
    - maligned # [deprecated]: Tool to detect Go structs that would take less memory if their fields were sorted [fast: false, auto-fix: false]
    - nlreturn # blank lines before return
    - nonamedreturns #: Reports all named returns [fast: false, auto-fix: false]
    - nosnakecase # [deprecated]: nosnakecase is a linter that detects snake case of variable naming and function name. [fast: true, auto-fix: false]
    - paralleltest # forces to use t.Parallel()
    - scopelint # [deprecated]: Scopelint checks for unpinned variables in go programs [fast: true, auto-fix: false]
    - structcheck # [deprecated]: Finds unused struct fields [fast: false, auto-fix: false]
    - testpackage # forces to use package_test naming
    - varcheck # [deprecated]: Finds unused global variables and constants [fast: false, auto-fix: false]
    - varnamelen
    - wrapcheck # forces to wrap external package errors
    - wsl # cuddles, Whitespace Linter - Forces you to use empty lines!.
